local MAJOR, MINOR = "LibRemoteEvent-0.3", 1
local LibRemoteEvent = LibStub:NewLibrary(MAJOR, MINOR)
if not LibRemoteEvent then return end

LibRemoteEvent.embeds = LibRemoteEvent.embeds or {}

-- TODO: Remove LibRpc dependency?
local libRpc = LibStub("LibRpc-0.3")

local addon = LibStub("AceAddon-3.0"):NewAddon(MAJOR, "AceEvent-3.0")

-- TODO: Refactor out LibRemoteCallbackHandler for use w/ Bucket / Hook libs
local sinkCallbackHandlers = {}     -- Table of event sink callback handlers, one per event source
local sourceCallbackHandler         -- Single event source callback handler

-- misc
local console                       -- Remoting addon, used for chat output
local playerName = UnitName("player")

-----------------------------------------------------------------------
-- Helper functions
-----------------------------------------------------------------------

local function DebugPrint(...)
    if nil == console then
        local aceAddon = LibStub("AceAddon-3.0", true)
        if aceAddon then console = aceAddon:GetAddon("Remoting-0.3", true) end
        console = console or false
    end
    if console then console:DebugPrint(MAJOR..":", ...) end
end

-- Gets the sink callback handler for a given source
local function GetSinkCallbackHandler(source)
    assert(type(source) == "string", "Invalid source: " .. source)
    return sinkCallbackHandlers[source]
end

-- Gets the sink callback handler for a given source or allocates a new one
local function CreateSinkCallbackHandler(source)
    local handler = GetSinkCallbackHandler(source)
    if not handler then
        handler = {}
        handler.events = LibStub("CallbackHandler-1.0"):New(handler)
        sinkCallbackHandlers[source] = handler
        DebugPrint("Sink callback handler created for " .. source)
    end
    return handler
end

-- Gets the unique source callback handler
local function GetSourceCallbackHandler()
    return sourceCallbackHandler
end

-- Gets the unique source callback handler or allocates a new one
local function CreateSourceCallbackHandler()
    local handler = GetSourceCallbackHandler()
    if not handler then
        handler = {}
        handler.events = LibStub("CallbackHandler-1.0"):New(handler)
        sourceCallbackHandler = handler
        
        -- set up the addon to relay events
        handler.events.OnUsed = function(self, target, event)
            DebugPrint("OnUsed:", self, target, event)
            addon:RegisterEvent(event, function(...) handler.events:Fire(...); DebugPrint("Fire", event) end)
            DebugPrint("Source callback handler registered with addon for " .. event)
        end
        handler.events.OnUnused = function(self, target, event)
            DebugPrint("OnUnused:", self, target, event)
            addon:UnregisterEvent(event)
            DebugPrint("Source callback handler unregistered with addon for " .. event)
        end

        DebugPrint("Source callback handler created")
    end

    return handler
end

-- Registers an event at the source (called via RPC)
local function RegisterSourceEvent(event, sink)
    assert(type(event) == "string", "Expected string for event type, got "..type(event))
    assert(type(sink) == "string", "Expected string for sink type, got "..type(sink))

    -- create remote callback
    local function f(eventName, ...)
        libRpc:RemoteCall(sink, nil, MAJOR.."_FireSinkEvent", eventName, playerName, ...)
        DebugPrint("Fired sink event " .. event .. " at " .. sink .. " via RPC")
    end

    -- register event
    local handler = CreateSourceCallbackHandler()
    handler.RegisterCallback(sink, event, f)
    DebugPrint(sink .. " registered for " .. event)
end

-- Unregisters an event at the source (called via RPC)
local function UnregisterSourceEvent(event, sink)
    local handler = GetSourceCallbackHandler()
    assert(handler, "No remote events registered")
    handler.UnregisterCallback(sink, event)
end

-- Unregisters all events at the source (called via RPC)
local function UnregisterAllSourceEvents(sink)
    local handler = GetSourceCallbackHandler()
    assert(handler, "No remote events registered")
    handler.UnregisterAllCallbacks(sink)
end

-- Fires an event an the sink (called via RPC)
local function FireSinkEvent(event, source, ...)
    assert(type(event) == "string", "Invalid event name: " .. event)
    assert(type(source) == "string", "Invalid source: " .. source)

    -- get the source callback handler
    local handler = GetSinkCallbackHandler(source)
    assert(handler, "Callback handler not found for source: " .. source)
    
    -- fire events to all lib clients
    handler.events:Fire(event, ...)
    DebugPrint("Fired sink event " .. event .. " from " .. source)
end

libRpc:RegisterRemoteApi(MAJOR.."_RegisterSourceEvent", RegisterSourceEvent)
libRpc:RegisterRemoteApi(MAJOR.."_UnregisterSourceEvent", UnregisterSourceEvent)
libRpc:RegisterRemoteApi(MAJOR.."_UnregisterAllSourceEvents", UnregisterAllSourceEvents)
libRpc:RegisterRemoteApi(MAJOR.."_FireSinkEvent", FireSinkEvent)

-----------------------------------------------------------------------
-- Public API
-----------------------------------------------------------------------

-----------------------------------------------------------------------
-- API RegisterRemoteEvent(target, event, method)

-- TODO: Should be able to specify remote function to run. Example: { "UnitName", "target" }
-- TODO: Message priority
-- TODO: Common type check assert & error message handler
-- TODO: Loc
function LibRemoteEvent:RegisterRemoteEvent(target, event, method)
    assert(type(target) == "string", "Invalid target: " .. target)
    assert(type(event) == "string", "Invalid event name: " .. event)
    assert((type(method) == "string") or (type(method) == "function"), "Expected string|function for method, got "..type(method))

    -- if source registration succeeds, register sink with source callback handler
    local function f(info)
        local handler = CreateSinkCallbackHandler(target)
        handler.RegisterCallback(self, event, method)
    end

    -- register source event, callback f only called on success
    libRpc:RemoteCall(target, f, MAJOR.."_RegisterSourceEvent", event, playerName)
end

-----------------------------------------------------------------------
-- API UnregisterRemoteEvent(target, event)

function LibRemoteEvent:UnregisterRemoteEvent(target, event)
    assert(type(target) == "string", "Invalid target: " .. target)
    assert(type(event) == "string", "Invalid event name: " .. event)

    -- unregister source event
    libRpc:RemoteCall(target, nil, MAJOR.."_UnregisterSourceEvent", event, playerName)

    -- unregister sink with source callback handler
    local handler = GetSinkCallbackHandler(target)
    assert(handler, "No events registered for target: " .. target)
    handler.UnregisterCallback(self, event)
end

-----------------------------------------------------------------------
-- API UnregisterAllRemoteEvents(target)

function LibRemoteEvent:UnregisterAllRemoteEvents(target)
    assert(type(target) == "string", "Invalid target: " .. target)

    -- unregister source event
    libRpc:RemoteCall(target, nil, MAJOR.."_UnregisterAllSourceEvents", playerName)

    -- unregister sink with source callback handler
    local handler = GetSinkCallbackHandler(target)
    if handler then
        handler.UnregisterAllCallbacks(self)
    end
end

-----------------------------------------------------------------------
-- API LibRemoteEvent:Embed(target)
-- - target (object) - target object to embed in
--
-- Embeds lib into the target object, making its functions available on target
function LibRemoteEvent:Embed(target)
    local mixins = { "RegisterRemoteEvent", "UnregisterRemoteEvent", "UnregisterAllRemoteEvents" }
	for k, v in pairs(mixins) do
		target[v] = self[v]
	end
	
	self.embeds[target] = true
	return target
end
